{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// To Use HTTP Request\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions, mapMutations } from \"vuex\";\n// For validate data\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength, maxLength } from \"@vuelidate/validators\";\nimport Navbar from '@/components/Header/Navbar.vue';\nexport default {\n  name: 'UpdateCategory',\n  components: {\n    Navbar\n  },\n  data() {\n    return {\n      v$: useValidate(),\n      locId: this.$route.params.locationId,\n      catId: this.$route.params.catId,\n      userId: \"\",\n      locName: \"\",\n      locAddress: \"\",\n      name: \"\",\n      successMessage: \"\",\n      errorMessage: \"\",\n      listOfUserCategories: [],\n      categoryName: []\n    };\n  },\n  validations() {\n    return {\n      name: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(15)\n      }\n    };\n  },\n  mounted() {\n    let user = localStorage.getItem('user-info');\n    if (!user) {\n      // Using name in router file\n      this.redirectTo({\n        val: 'sign-up'\n      });\n    } else {\n      this.userId = JSON.parse(user).id;\n      this.userName = JSON.parse(user).name;\n      this.canUserAccessThisLocation({\n        userIdIs: this.userId,\n        locationIdIs: this.locId,\n        redirectToPage: \"home\"\n      });\n      this.canUserAccessThisCategory({\n        userIdIs: this.userId,\n        locationIdIs: this.locId,\n        catIdIs: this.catId,\n        redirectToPage: \"home\"\n      });\n      this.getLocationInfo(this.userId, this.locId);\n      this.displayUserCategories(this.userId, this.locId);\n      this.getCategoryName(this.userId, this.locId, this.catId);\n    }\n  },\n  methods: {\n    ...mapMutations([\"isLoggedInUser\", \"displayAllCategories\", \"canUserAccessThisLocation\", \"canUserAccessThisCategory\"]),\n    ...mapActions(['redirectTo']),\n    async getLocationInfo(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n      let locDetails = [];\n      if (result.status == 200) {\n        locDetails = result.data;\n        this.locName = locDetails[0].name;\n        this.locAddress = locDetails[0].address;\n      }\n    },\n    async displayUserCategories(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/categories?userId=${userId}&locationId=${locId}`);\n      if (result.status == 200) {\n        this.listOfUserCategories = result.data;\n      }\n    },\n    async getCategoryName(userId, locId, catId) {\n      let result = await axios.get(`\n            http://localhost:3000/categories?userId=${userId}&locationId=${locId}&id=${catId}\n            `);\n      if (result.status == 200) {\n        this.categoryNames = result.data;\n        if (this.categoryNames.length > 0) {\n          this.name = this.categoryNames[0].name;\n        }\n      }\n    },\n    async updateCategory() {\n      // Activate Validation\n      this.v$.$validate();\n      if (!this.v$.$error) {\n        let filterCategoryName = this.listOfUserCategories.filter(v => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n        if (filterCategoryName.length > 0) {\n          this.errorMessage = 'Category Name already exists, Try Another Name';\n          this.successMessage = '';\n        } else {\n          let result = await axios.put(`http://localhost:3000/categories/${this.catId}`, {\n            name: this.name,\n            userId: this.userId,\n            locationId: parseInt(this.locId)\n          });\n          if (result.status == 200) {\n            this.errorMessage = '';\n            this.successMessage = 'Update Category Name Successfully';\n            setTimeout(() => {\n              this.$router.push({\n                name: \"view-categories\",\n                params: {\n                  locationId: this.locId\n                }\n              });\n            }, 2000);\n          } else {\n            this.successMessage = '';\n            this.errorMessage = 'Something went wrong, Try Again';\n          }\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in category name';\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","mapActions","mapMutations","useValidate","required","minLength","maxLength","Navbar","name","components","data","v$","locId","$route","params","locationId","catId","userId","locName","locAddress","successMessage","errorMessage","listOfUserCategories","categoryName","validations","mounted","user","localStorage","getItem","redirectTo","val","JSON","parse","id","userName","canUserAccessThisLocation","userIdIs","locationIdIs","redirectToPage","canUserAccessThisCategory","catIdIs","getLocationInfo","displayUserCategories","getCategoryName","methods","result","get","locDetails","status","address","categoryNames","length","updateCategory","$validate","$error","filterCategoryName","filter","v","toLocaleLowerCase","put","parseInt","setTimeout","$router","push"],"sourceRoot":"","sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/Menu/UpdateCategory.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <Navbar />\n        <router-link :to=\"{name: 'view-categories', params:{locId:locationId}}\">\n            <button type=\"button\" class=\"btn btn-light\">Back To Category</button>\n        </router-link>\n        &nbsp;\n        <router-link :to=\"{name: 'menu', params:{locId:locationId}}\">\n            <button type=\"button\" class=\"btn btn-light\">Back To Menu</button>\n        </router-link>\n        <br />\n        <div class=\"text-center\">\n            <h1 class=\"mb\">{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n        <!-- --------------------------------------------------------- -->\n        <form @click.prevent>\n            <h1 class=\"text-center\">Update Category</h1>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Category Name\" v-model=\"name\">\n                    <span class=\"error-feedback\" v-if=\"v$.name.$error\">{{v$.name.$errors[0].$message}}</span>\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length>0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length>0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"updateCategory()\" class=\"btn btn-success\">Update Now</button>\n                </div>\n            </div>\n        </form>\n        <!-- --------------------------------------------------------- -->\n    </div>\n</template>\n\n<script>\n\n// To Use HTTP Request\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions, mapMutations } from \"vuex\";\n// For validate data\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength, maxLength } from \"@vuelidate/validators\";\nimport Navbar from '@/components/Header/Navbar.vue';\n\nexport default {\n    name: 'UpdateCategory',\n    components: {\n        Navbar\n    },\n    data() {\n        return {\n            v$: useValidate(),\n            locId: this.$route.params.locationId,\n            catId: this.$route.params.catId,\n            userId: \"\",\n            locName: \"\",\n            locAddress: \"\",\n            name: \"\",\n            successMessage: \"\",\n            errorMessage: \"\",\n            listOfUserCategories: [],\n            categoryName:[],\n        }\n    },\n    validations() {\n        return {\n            name: { required, minLength: minLength(3), maxLength: maxLength(15)},\n        }\n    },\n    mounted() {\n        let user = localStorage.getItem('user-info');\n        if (!user) {\n            // Using name in router file\n            this.redirectTo({ val: 'sign-up' });\n        } else {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.canUserAccessThisLocation({\n                userIdIs: this.userId,\n                locationIdIs: this.locId,\n                redirectToPage: \"home\",\n            });\n            this.canUserAccessThisCategory({\n                userIdIs: this.userId,\n                locationIdIs: this.locId,\n                catIdIs: this.catId,\n                redirectToPage: \"home\",\n            });\n            this.getLocationInfo(this.userId, this.locId);\n            this.displayUserCategories(this.userId, this.locId);\n            this.getCategoryName(this.userId, this.locId, this.catId);\n        }\n    },\n    methods: {\n        ...mapMutations([\n            \"isLoggedInUser\",\n            \"displayAllCategories\",\n            \"canUserAccessThisLocation\",\n            \"canUserAccessThisCategory\",\n        ]),\n        ...mapActions(['redirectTo']),\n        async getLocationInfo(userId, locId) {\n            let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n        async displayUserCategories(userId, locId) {\n            let result = await axios.get(`http://localhost:3000/categories?userId=${userId}&locationId=${locId}`);\n            if (result.status == 200) {\n                this.listOfUserCategories = result.data;\n            }\n        },\n        async getCategoryName(userId,locId,catId) {\n            let result = await axios.get(`\n            http://localhost:3000/categories?userId=${userId}&locationId=${locId}&id=${catId}\n            `);\n            if (result.status == 200) {\n                this.categoryNames = result.data;\n                if (this.categoryNames.length>0) {\n                    this.name = this.categoryNames[0].name;\n                }\n            }\n        },\n        async updateCategory() {\n\n            // Activate Validation\n            this.v$.$validate();\n\n            if (!this.v$.$error) { \n\n                let filterCategoryName = this.listOfUserCategories.filter(\n                    (v) => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase()\n                );\n\n                if (filterCategoryName.length > 0) {\n                    this.errorMessage = 'Category Name already exists, Try Another Name';\n                    this.successMessage = '';\n                } else {\n\n                    let result = await axios.put(`http://localhost:3000/categories/${this.catId}`, {\n                        name: this.name,\n                        userId: this.userId,\n                        locationId: parseInt(this.locId),\n                    });\n                    if (result.status == 200) {\n                        this.errorMessage = '';\n                        this.successMessage = 'Update Category Name Successfully';\n                        setTimeout(() => {\n                            this.$router.push({ name: \"view-categories\", params: { locationId: this.locId } });\n                        }, 2000);\n                    } else {\n                        this.successMessage = '';\n                        this.errorMessage = 'Something went wrong, Try Again';\n                    }\n\n                }\n\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in category name';\n            }\n        },\n    },\n}\n</script>\n\n<style scoped>\n.mb {\n    margin-bottom: 0;\n}\n\n.error-feedback {\n    color: red;\n    font-size: 0.85em;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}