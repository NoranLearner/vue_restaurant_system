{"ast":null,"code":"import axios from \"axios\";\n// For redirect to links\nimport { mapActions } from \"vuex\";\n// For validate data\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength } from \"@vuelidate/validators\";\n// For Composition Api\nimport { reactive, computed } from \"vue\";\nimport Navbar from '@/components/Header/Navbar.vue';\nexport default {\n  name: 'UpdateLocation',\n  setup() {\n    // Data\n    const state = reactive({\n      name: '',\n      phone: '',\n      address: ''\n    });\n    // Validations\n    const rules = computed(() => {\n      return {\n        name: {\n          required,\n          minLength: minLength(10)\n        },\n        phone: {\n          required,\n          minLength: minLength(11)\n        },\n        address: {\n          required\n        }\n      };\n    });\n    // Write rules first\n    const v$ = useValidate(rules, state);\n    return {\n      state,\n      v$\n    };\n  },\n  data() {\n    return {\n      userId: '',\n      locationId: '',\n      successMessage: '',\n      errorMessage: ''\n    };\n  },\n  components: {\n    Navbar\n  },\n  mounted() {\n    let user = localStorage.getItem(\"user-info\");\n    if (!user) {\n      this.redirectTo({\n        val: \"sign-up\"\n      });\n    } else {\n      this.userId = JSON.parse(user).id;\n      this.locationId = this.$route.params.locationId;\n      this.canCurrentUserAccessThisLocation();\n    }\n  },\n  methods: {\n    ...mapActions([\"redirectTo\"]),\n    async canCurrentUserAccessThisLocation() {\n      let result = await axios.get(`\n            http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}\n            `);\n      if (result.status == 200 && result.data.length > 0) {\n        this.locationData = result.data;\n        this.state.name = this.locationData[0].name;\n        this.state.phone = this.locationData[0].phone;\n        this.state.address = this.locationData[0].address;\n      } else {\n        this.redirectTo({\n          val: 'home'\n        });\n      }\n    },\n    async updateLocation() {\n      // Activate Validation\n      this.v$.$validate();\n      if (!this.v$.$error) {\n        console.log(\"Form Validated Successfully\");\n        let result = await axios.put(`http://localhost:3000/locations/${this.locationId}`, {\n          name: this.state.name,\n          phone: this.state.phone,\n          address: this.state.address,\n          userId: this.userId\n        });\n        if (result.status == 200) {\n          // show success message\n          this.errorMessage = '';\n          this.successMessage = 'Updated Location successfully';\n          setTimeout(() => {\n            this.redirectTo({\n              val: \"home\"\n            });\n          }, 2000);\n        } else {\n          // show error message\n          this.successMessage = '';\n          this.errorMessage = 'Something went wrong, Try Again';\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in all required fields';\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","mapActions","useValidate","required","minLength","reactive","computed","Navbar","name","setup","state","phone","address","rules","v$","data","userId","locationId","successMessage","errorMessage","components","mounted","user","localStorage","getItem","redirectTo","val","JSON","parse","id","$route","params","canCurrentUserAccessThisLocation","methods","result","get","status","length","locationData","updateLocation","$validate","$error","console","log","put","setTimeout"],"sourceRoot":"","sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/Locations/UpdateLocation.vue"],"sourcesContent":["<template>\n\n    <Navbar/>\n\n    <form @click.prevent>\n        <h1 class=\"text-center\">Update Restaurant</h1>\n        <br />\n        <div class=\"row g-3 align-items-center\">\n            <div class=\"col-auto d-block mx-auto\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Restaurant Name\" v-model=\"state.name\">\n                <span class=\"error-feedback\" v-if=\"v$.name.$error\">{{v$.name.$errors[0].$message}}</span>\n            </div>\n        </div>\n        <br />\n        <div class=\"row g-3 align-items-center\">\n            <div class=\"col-auto d-block mx-auto\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Restaurant Phone\" v-model=\"state.phone\">\n                <span class=\"error-feedback\" v-if=\"v$.phone.$error\">{{v$.phone.$errors[0].$message}}</span>\n            </div>\n        </div>\n        <br />\n        <div class=\"row g-3 align-items-center\">\n            <div class=\"col-auto d-block mx-auto\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Restaurant Address\" v-model=\"state.address\">\n                <span class=\"error-feedback\" v-if=\"v$.address.$error\">{{v$.address.$errors[0].$message}}</span>\n            </div>\n        </div>\n        <br />\n        <div class=\"row g-3 align-items-center\">\n            <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length>0\">\n                {{ successMessage }}\n            </div>\n            <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length>0\">\n                {{ errorMessage }}\n            </div>\n        </div>\n        <br />\n        <div class=\"row g-3 align-items-center\">\n            <div class=\"col-auto d-block mx-auto\">\n                <button type=\"button\" class=\"btn btn-success\" @click=\"updateLocation()\">Update Now</button>\n            </div>\n        </div>\n    </form>\n\n</template>\n\n<script>\n\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions } from \"vuex\";\n// For validate data\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength } from \"@vuelidate/validators\";\n// For Composition Api\nimport { reactive, computed } from \"vue\";\n\nimport Navbar from '@/components/Header/Navbar.vue';\n\nexport default {\n    name: 'UpdateLocation',\n    setup() {\n        // Data\n        const state = reactive({\n            name: '',\n            phone: '',\n            address: '',\n        });\n        // Validations\n        const rules = computed(() => {\n            return {\n                name: { required, minLength: minLength(10) },\n                phone: { required, minLength: minLength(11) },\n                address: { required },\n            };\n        });\n        // Write rules first\n        const v$ = useValidate(rules, state);\n        return { state, v$ };\n    },\n    data() {\n        return {\n            userId: '',\n            locationId: '',\n            successMessage: '',\n            errorMessage: '',\n        }\n    },\n    components: {\n        Navbar\n    },\n    mounted() {\n        let user = localStorage.getItem(\"user-info\");\n        if (!user) {\n            this.redirectTo({ val: \"sign-up\" });\n        } else {\n            this.userId = JSON.parse(user).id;\n            this.locationId = this.$route.params.locationId;\n            this.canCurrentUserAccessThisLocation();\n        }\n    },\n    methods: {\n        ...mapActions([\"redirectTo\"]),\n        async canCurrentUserAccessThisLocation() {\n            let result = await axios.get(`\n            http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}\n            `);\n            if (result.status == 200 && result.data.length > 0) {\n                this.locationData = result.data;\n                this.state.name = this.locationData[0].name;\n                this.state.phone = this.locationData[0].phone;\n                this.state.address = this.locationData[0].address;\n            } else {\n                this.redirectTo({ val: 'home' });\n            }\n        },\n        async updateLocation() {\n            // Activate Validation\n            this.v$.$validate();\n            if (!this.v$.$error) {\n                console.log(\"Form Validated Successfully\");\n                let result = await axios.put(`http://localhost:3000/locations/${this.locationId}`,\n                    {\n                        name: this.state.name,\n                        phone: this.state.phone,\n                        address: this.state.address,\n                        userId: this.userId,\n                    });\n                if (result.status == 200) {\n                    // show success message\n                    this.errorMessage = '';\n                    this.successMessage = 'Updated Location successfully';\n                    setTimeout(() => {\n                        this.redirectTo({ val: \"home\" });\n                    }, 2000);\n                } else {\n                    // show error message\n                    this.successMessage = '';\n                    this.errorMessage = 'Something went wrong, Try Again';\n                }\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in all required fields';\n            }\n        },\n    },\n}\n</script>\n\n<style scoped lang=\"scss\">\n.error-feedback {\n    color: red;\n    font-size: 0.85em;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}