{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-e4dd921e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"button\",\n  class: \"btn btn-secondary\"\n}, \"Add Category\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Navbar), _createVNode(_component_router_link, {\n    to: {\n      name: 'add-new-category',\n      params: {\n        locId: _ctx.locationId\n      }\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_2]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"to\"])]);\n}","map":{"version":3,"mappings":";;;EACSA,KAAK,EAAC;AAAW;gEAGdC,oBAAqE;EAA7DC,IAAI,EAAC,QAAQ;EAACF,KAAK,EAAC;GAAoB,cAAY;;;;;uBAHpEG,oBAKM,OALNC,UAKM,GAJFC,aAAiBC,oBACjBD,aAEcE;IAFAC,EAAE;MAAAC;MAAAC;QAAAC,OAA2CC;MAAU;IAAA;;sBACjE,MAAqE,CAArEC,UAAqE","names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","_createVNode","_component_Navbar","_component_router_link","to","name","params","locId","_ctx","_hoisted_2"],"sourceRoot":"","sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/Menu/ViewCategories.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <Navbar></Navbar>\n        <router-link :to=\"{name: 'add-new-category', params:{locId:locationId}}\">\n            <button type=\"button\" class=\"btn btn-secondary\">Add Category</button>\n        </router-link>\n    </div>\n</template>\n\n<script>\nimport Navbar from '@/components/Header/Navbar.vue';\n\nexport default {\n    name: 'ViewCategories',\n    components: {\n        Navbar\n    },\n    data() {\n        return {\n            locId: this.$route.params.locationId,\n            userId: \"\",\n            locName: \"\",\n            locAddress: \"\",\n        }\n    },\n    computed: {\n        ...mapState([\n            \"numOfCategories\",\n            \"listOfCategories\"\n        ]),\n    },\n    mounted() {\n        let user = localStorage.getItem('user-info');\n        if (!user) {\n            // Using name in router file\n            this.redirectTo({ val: 'sign-up' });\n        } else {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.displayAllCategories({\n                userIdIs: this.userId,\n                locationIdIs: this.locId\n            });\n            this.canUserAccessThisLocation({\n                userIdIs: this.userId,\n                locationIdIs: this.locId,\n                redirectToPage: \"home\",\n            });\n            this.getLocationInfo(this.userId, this.locId);\n        }\n    },\n    methods: {\n        ...mapMutations([\n            \"isLoggedInUser\",\n            \"displayAllCategories\",\n            \"canUserAccessThisLocation\"\n        ]),\n        ...mapActions(['redirectTo']),\n        async getLocationInfo(userId, locId) {\n            let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n    },\n}\n</script>\n\n<style scoped>\n.mb {\n    margin-bottom: 0;\n}\n.mt15 {\n    margin-top: 15px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}