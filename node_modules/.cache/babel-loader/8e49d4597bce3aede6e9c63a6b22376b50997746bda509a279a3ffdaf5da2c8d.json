{"ast":null,"code":"// To Use HTTP Request\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\nimport Navbar from \"@/components/Header/Navbar.vue\";\nexport default {\n  name: \"Menu\",\n  components: {\n    Navbar\n  },\n  data() {\n    return {\n      userId: \"\",\n      userName: \"\",\n      locationId: this.$route.params.locationId,\n      locName: \"\",\n      locAddress: \"\",\n      listOfUserCategories: [],\n      listOfUserItems: []\n    };\n  },\n  computed: {\n    ...mapState([\"isUserLoggedIn\", \"LoggedInUserId\", \"numOfCategories\", \"listOfCategories\"])\n  },\n  async mounted() {\n    let user = localStorage.getItem(\"user-info\");\n    if (!user) {\n      // Using name in router file\n      this.redirectTo({\n        val: \"sign-up\"\n      });\n    } else {\n      this.userId = JSON.parse(user).id;\n      this.userName = JSON.parse(user).name;\n      this.isLoggedInUser();\n      this.displayAllCategories({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId\n      });\n      this.canUserAccessThisLocation({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId,\n        redirectToPage: \"home\"\n      });\n      this.getLocationInfo(this.userId, this.locationId);\n      this.getCurrentUserCategories(this.userId, this.locationId);\n      this.getCurrentUserItems(this.userId, this.locationId);\n    }\n  },\n  methods: {\n    ...mapMutations([\"isLoggedInUser\", \"displayAllCategories\", \"canUserAccessThisLocation\"]),\n    ...mapActions([\"redirectTo\"]),\n    async getLocationInfo(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n      let locDetails = [];\n      if (result.status == 200) {\n        locDetails = result.data;\n        this.locName = locDetails[0].name;\n        this.locAddress = locDetails[0].address;\n      }\n    },\n    async getCurrentUserCategories(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/categories?userId=${userId}&locationId=${locId}`);\n      if (result.status == 200) {\n        this.listOfUserCategories = result.data;\n      }\n    },\n    async getCurrentUserItems(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/items?userId=${userId}&locId=${locId}`);\n      if (result.status == 200) {\n        this.listOfUserItems = result.data;\n      }\n    },\n    numberWithCommas(x) {\n      return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n  }\n};","map":{"version":3,"mappings":"AA4GA;AACA,OAAOA,KAAI,MAAO,OAAO;AACzB;AACA,SAASC,UAAU,EAAEC,QAAQ,EAAEC,YAAW,QAAS,MAAM;AACzD,OAAOC,MAAK,MAAO,gCAAgC;AAEnD,eAAe;EACXC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE;IACRF;EACJ,CAAC;EACDG,IAAI,GAAG;IACH,OAAO;MACHC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,UAAU;MACzCG,OAAO,EAAE,EAAE;MACXC,UAAU,EAAE,EAAE;MACdC,oBAAoB,EAAE,EAAE;MACxBC,eAAe,EAAE;IACrB,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACN,GAAGf,QAAQ,CAAC,CACR,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,EACjB,kBAAkB,CACrB;EACL,CAAC;EACD,MAAMgB,OAAO,GAAG;IACZ,IAAIC,IAAG,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC5C,IAAI,CAACF,IAAI,EAAE;MACP;MACA,IAAI,CAACG,UAAU,CAAC;QAAEC,GAAG,EAAE;MAAU,CAAC,CAAC;IACvC,OAAO;MACH,IAAI,CAACf,MAAK,GAAIgB,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC,CAACO,EAAE;MACjC,IAAI,CAACjB,QAAO,GAAIe,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC,CAACd,IAAI;MACrC,IAAI,CAACsB,cAAc,EAAE;MACrB,IAAI,CAACC,oBAAoB,CAAC;QACtBC,QAAQ,EAAE,IAAI,CAACrB,MAAM;QACrBsB,YAAY,EAAE,IAAI,CAACpB;MACvB,CAAC,CAAC;MACF,IAAI,CAACqB,yBAAyB,CAAC;QAC3BF,QAAQ,EAAE,IAAI,CAACrB,MAAM;QACrBsB,YAAY,EAAE,IAAI,CAACpB,UAAU;QAC7BsB,cAAc,EAAE;MACpB,CAAC,CAAC;MACF,IAAI,CAACC,eAAe,CAAC,IAAI,CAACzB,MAAM,EAAE,IAAI,CAACE,UAAU,CAAC;MAElD,IAAI,CAACwB,wBAAwB,CAAC,IAAI,CAAC1B,MAAM,EAAE,IAAI,CAACE,UAAU,CAAC;MAE3D,IAAI,CAACyB,mBAAmB,CAAC,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACE,UAAU,CAAC;IAC1D;EACJ,CAAC;EACD0B,OAAO,EAAE;IACL,GAAGjC,YAAY,CAAC,CACZ,gBAAgB,EAChB,sBAAsB,EACtB,2BAA2B,CAC9B,CAAC;IACF,GAAGF,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC;IAC7B,MAAMgC,eAAe,CAACzB,MAAM,EAAE6B,KAAK,EAAE;MACjC,IAAIC,MAAK,GAAI,MAAMtC,KAAK,CAACuC,GAAG,CACvB,0CAAyC/B,MAAO,OAAM6B,KAAM,GAChE;MACD,IAAIG,UAAS,GAAI,EAAE;MACnB,IAAIF,MAAM,CAACG,MAAK,IAAK,GAAG,EAAE;QACtBD,UAAS,GAAIF,MAAM,CAAC/B,IAAI;QACxB,IAAI,CAACM,OAAM,GAAI2B,UAAU,CAAC,CAAC,CAAC,CAACnC,IAAI;QACjC,IAAI,CAACS,UAAS,GAAI0B,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO;MAC3C;IACJ,CAAC;IACD,MAAMR,wBAAwB,CAAC1B,MAAM,EAAE6B,KAAK,EAAE;MAC1C,IAAIC,MAAK,GAAI,MAAMtC,KAAK,CAACuC,GAAG,CACvB,2CAA0C/B,MAAO,eAAc6B,KAAM,GACzE;MACD,IAAIC,MAAM,CAACG,MAAK,IAAK,GAAG,EAAE;QACtB,IAAI,CAAC1B,oBAAmB,GAAIuB,MAAM,CAAC/B,IAAI;MAC3C;IACJ,CAAC;IACD,MAAM4B,mBAAmB,CAAC3B,MAAM,EAAE6B,KAAK,EAAE;MACrC,IAAIC,MAAK,GAAI,MAAMtC,KAAK,CAACuC,GAAG,CACvB,sCAAqC/B,MAAO,UAAS6B,KAAM,GAC/D;MACD,IAAIC,MAAM,CAACG,MAAK,IAAK,GAAG,EAAE;QACtB,IAAI,CAACzB,eAAc,GAAIsB,MAAM,CAAC/B,IAAI;MACtC;IACJ,CAAC;IACDoC,gBAAgB,CAACC,CAAC,EAAE;MAChB,OAAOA,CAAC,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,iCAAiC,EAAE,GAAG,CAAC;IACvE;EACJ;AACJ,CAAC","names":["axios","mapActions","mapState","mapMutations","Navbar","name","components","data","userId","userName","locationId","$route","params","locName","locAddress","listOfUserCategories","listOfUserItems","computed","mounted","user","localStorage","getItem","redirectTo","val","JSON","parse","id","isLoggedInUser","displayAllCategories","userIdIs","locationIdIs","canUserAccessThisLocation","redirectToPage","getLocationInfo","getCurrentUserCategories","getCurrentUserItems","methods","locId","result","get","locDetails","status","address","numberWithCommas","x","toString","replace"],"sourceRoot":"","sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/Menu/Menu.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <Navbar />\n\n        <div>\n            <router-link :to=\"{ name: 'view-categories', params: { locId: locationId } }\">\n                <button type=\"button\" class=\"btn btn-secondary float-start\">\n                    View/Add Categories\n                </button>\n            </router-link>\n\n            <router-link :to=\"{ name: 'add-new-item', params: { locId: locationId } }\">\n                <button type=\"button\" class=\"btn btn-secondary float-end\" v-if=\"numOfCategories > 0\">\n                    Add New Items\n                </button>\n            </router-link>\n        </div>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1 class=\"mb\">{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n\n        <div class=\"mb-3\" v-if=\"listOfUserCategories.length>0\">\n            <router-link :to=\"{ name: 'delete-all-items', params: { locId: locationId } }\">\n                <button type=\"button\" class=\"btn btn-danger\">\n                    Delete All Items\n                </button>\n            </router-link>\n        </div>\n\n        <div class=\"each-category\">\n            <div class=\"\" v-for=\"(cat, i) in listOfUserCategories\" :key=\"i\">\n                <div class=\"row\">\n                    <div class=\"catName row col-12\">\n                        <h5 class=\"text-center bg-light p-1\">{{ cat.name }}</h5>\n                    </div>\n                    <div :class=\"{ 'col-xs-12 col-sm-4 px-4': cat.id == item.catId }\"\n                        v-for=\"(item, x) in listOfUserItems\" :key=\"x\" v-show=\"cat.id == item.catId\">\n                        <div :class=\"{ 'each-item': cat.id == item.catId }\" v-if=\"cat.id == item.catId\">\n                            <h6 class=\"item-name\">Item: {{ item.name }}</h6>\n                            <p class=\"item-desc text-muted\">\n                                \"Description: {{ item.description }} \"\n                            </p>\n                            <div>\n                                <span class=\"available-items float-start\">Available Quantity: {{\n                                        numberWithCommas(item.qty)\n                                }}</span>\n                                <span class=\"item-price float-end\">\n                                    Price: {{ numberWithCommas(item.price) }} $\n                                </span>\n                            </div>\n                            <div class=\"clearfix\"></div>\n                            <br />\n                            <div class=\"text-white\">\n                                <router-link :to=\"{\n                                    name: 'update-item',\n                                    params: { locationId: locationId, itemId: item.id },\n                                }\">\n                                    <button class=\"btn btn-success float-start\">Update</button>\n                                </router-link>\n                                <router-link :to=\"{\n                                    name: 'delete-item', \n                                    params: { locationId: locationId, itemId: item.id}}\n                                \">\n                                    <button class=\"btn btn-danger float-end\">Delete</button>\n                                </router-link>\n                            </div>\n                            <div class=\"clearfix\"></div>\n                            <br />\n                        </div>\n                    </div>\n                    <hr />\n                </div>\n            </div>\n        </div>\n\n        <!-- ---------------------------------------- -->\n\n        <!-- <div>\n            Is User Logged In? {{ isUserLoggedIn }}\n            <br/>\n            User Id Is: {{ LoggedInUserId }}\n            <br/>\n            Num of Categories? {{ numOfCategories }}\n            <br />\n            Categories Array: {{ listOfCategories }}\n            <br />\n        </div> -->\n\n        <!-- ---------------------------------------- -->\n        <!-- \n        {{ listOfUserCategories }}\n\n        <hr>\n\n        {{ listOfUserItems }}\n\n        \n        -->\n        <!-- ---------------------------------------- -->\n    </div>\n</template>\n\n<script>\n// To Use HTTP Request\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\nimport Navbar from \"@/components/Header/Navbar.vue\";\n\nexport default {\n    name: \"Menu\",\n    components: {\n        Navbar,\n    },\n    data() {\n        return {\n            userId: \"\",\n            userName: \"\",\n            locationId: this.$route.params.locationId,\n            locName: \"\",\n            locAddress: \"\",\n            listOfUserCategories: [],\n            listOfUserItems: [],\n        };\n    },\n    computed: {\n        ...mapState([\n            \"isUserLoggedIn\",\n            \"LoggedInUserId\",\n            \"numOfCategories\",\n            \"listOfCategories\",\n        ]),\n    },\n    async mounted() {\n        let user = localStorage.getItem(\"user-info\");\n        if (!user) {\n            // Using name in router file\n            this.redirectTo({ val: \"sign-up\" });\n        } else {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.isLoggedInUser();\n            this.displayAllCategories({\n                userIdIs: this.userId,\n                locationIdIs: this.locationId,\n            });\n            this.canUserAccessThisLocation({\n                userIdIs: this.userId,\n                locationIdIs: this.locationId,\n                redirectToPage: \"home\",\n            });\n            this.getLocationInfo(this.userId, this.locationId);\n\n            this.getCurrentUserCategories(this.userId, this.locationId);\n\n            this.getCurrentUserItems(this.userId, this.locationId);\n        }\n    },\n    methods: {\n        ...mapMutations([\n            \"isLoggedInUser\",\n            \"displayAllCategories\",\n            \"canUserAccessThisLocation\",\n        ]),\n        ...mapActions([\"redirectTo\"]),\n        async getLocationInfo(userId, locId) {\n            let result = await axios.get(\n                `http://localhost:3000/locations?userId=${userId}&id=${locId}`\n            );\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n        async getCurrentUserCategories(userId, locId) {\n            let result = await axios.get(\n                `http://localhost:3000/categories?userId=${userId}&locationId=${locId}`\n            );\n            if (result.status == 200) {\n                this.listOfUserCategories = result.data;\n            }\n        },\n        async getCurrentUserItems(userId, locId) {\n            let result = await axios.get(\n                `http://localhost:3000/items?userId=${userId}&locId=${locId}`\n            );\n            if (result.status == 200) {\n                this.listOfUserItems = result.data;\n            }\n        },\n        numberWithCommas(x) {\n            return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n        },\n    },\n};\n</script>\n\n<style scoped>\n.mb {\n    margin-bottom: 0;\n}\n\n.catName {\n    color: teal;\n    font-weight: bold;\n}\n\n.item-name {\n    color: darkgoldenrod;\n}\n\n.item-price {\n    color: firebrick;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}