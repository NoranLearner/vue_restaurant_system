{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// To Use HTTP Request\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\n// For validate data\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength, maxLength, between } from \"@vuelidate/validators\";\nimport Navbar from '@/components/Header/Navbar.vue';\nexport default {\n  name: 'UpdateItem',\n  components: {\n    Navbar\n  },\n  data() {\n    return {\n      v$: useValidate(),\n      userId: \"\",\n      userName: \"\",\n      locationId: this.$route.params.locationId,\n      itemId: this.$route.params.itemId,\n      locName: \"\",\n      locAddress: \"\",\n      itemName: \"\",\n      itemPrice: \"\",\n      itemsQty: 1,\n      description: \"\",\n      pickedCategory: \"\",\n      successMessage: \"\",\n      errorMessage: \"\"\n    };\n  },\n  validations() {\n    return {\n      itemName: {\n        required,\n        minLength: minLength(6)\n      },\n      itemPrice: {\n        required,\n        between: between(0, 1000000)\n      },\n      itemsQty: {\n        required,\n        between: between(1, 100000)\n      },\n      description: {\n        required,\n        minLength: minLength(6),\n        maxLength: maxLength(120)\n      },\n      pickedCategory: {\n        required\n      }\n    };\n  },\n  computed: {\n    ...mapState([\"isUserLoggedIn\", \"LoggedInUserId\", \"numOfCategories\", \"listOfCategories\"])\n  },\n  async mounted() {\n    let user = localStorage.getItem('user-info');\n    if (!user) {\n      // Using name in router file\n      this.redirectTo({\n        val: 'sign-up'\n      });\n    } else {\n      this.userId = JSON.parse(user).id;\n      this.userName = JSON.parse(user).name;\n      this.isLoggedInUser();\n      this.displayAllCategories({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId\n      });\n      this.canUserAccessThisItem({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId,\n        itemIdIs: this.itemId,\n        redirectToPage: \"home\"\n      });\n      this.canUserAccessThisLocation({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId,\n        redirectToPage: \"home\"\n      });\n      this.getItemInfo(this.userId, this.locationId, this.itemId);\n      this.getLocationInfo(this.userId, this.locationId);\n    }\n  },\n  methods: {\n    ...mapMutations([\"isLoggedInUser\", \"displayAllCategories\", \"canUserAccessThisItem\", \"canUserAccessThisLocation\"]),\n    ...mapActions(['redirectTo']),\n    async getItemInfo(userId, locId, itemId) {\n      let result = await axios.get(`\n                http://localhost:3000/items?userId=${userId}&locationId=${locId}&id=${itemId}\n            `);\n      let itemDetails = result.data[0];\n      if (result.status == 200) {\n        this.itemName = itemDetails.name;\n        this.itemPrice = itemDetails.price;\n        this.itemsQty = itemDetails.qty;\n        this.description = itemDetails.description;\n        this.pickedCategory = itemDetails.catId;\n      }\n    },\n    async getLocationInfo(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n      let locDetails = [];\n      if (result.status == 200) {\n        locDetails = result.data;\n        if (locDetails.length > 0) {\n          this.locName = locDetails[0].name;\n          this.locAddress = locDetails[0].address;\n        }\n      }\n    },\n    async updateItem() {\n      // Activate Validation\n      this.v$.$validate();\n      if (!this.v$.$error) {\n        // http://localhost:3000/items/1\n        let result = await axios.put(`http://localhost:3000/items/${this.itemId}`, {\n          name: this.itemName,\n          // \"17.00\"\n          price: parseFloat(this.itemPrice).toFixed(2),\n          qty: parseInt(this.itemsQty),\n          description: this.description,\n          catId: this.pickedCategory,\n          locId: parseInt(this.locationId),\n          userId: this.userId\n        });\n        if (result.status == 200) {\n          this.errorMessage = '';\n          this.successMessage = 'Item updated successfully';\n          setTimeout(() => {\n            this.$router.push({\n              name: \"menu\",\n              params: {\n                locationId: this.locationId\n              }\n            });\n          }, 2000);\n        } else {\n          this.successMessage = '';\n          this.errorMessage = 'Something went wrong, Try Again';\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in all required fields';\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","mapActions","mapState","mapMutations","useValidate","required","minLength","maxLength","between","Navbar","name","components","data","v$","userId","userName","locationId","$route","params","itemId","locName","locAddress","itemName","itemPrice","itemsQty","description","pickedCategory","successMessage","errorMessage","validations","computed","mounted","user","localStorage","getItem","redirectTo","val","JSON","parse","id","isLoggedInUser","displayAllCategories","userIdIs","locationIdIs","canUserAccessThisItem","itemIdIs","redirectToPage","canUserAccessThisLocation","getItemInfo","getLocationInfo","methods","locId","result","get","itemDetails","status","price","qty","catId","locDetails","length","address","updateItem","$validate","$error","put","parseFloat","toFixed","parseInt","setTimeout","$router","push"],"sourceRoot":"","sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/Menu/UpdateItem.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <router-link :to=\"{ name: 'menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-start\">Back To Menu</button>\n        </router-link>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1 class=\"mb0\">{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n        <hr />\n\n        <!-- ------------------------------------- -->\n\n        <form @click.prevent>\n            <h1 class=\"text-center\">Update Item</h1>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <!-- https://getbootstrap.com/docs/5.0/forms/floating-labels/ -->\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemName.$error }\">\n                        <input type=\"text\" class=\"form-control w300\" id=\"floatingItemName\" placeholder=\"Enter Item Name\"\n                            v-model.trim=\"itemName\">\n                        <label for=\"floatingItemName\">Enter Item Name</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemName.$error\">{{ v$.itemName.$errors[0].$message\n                        }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemPrice.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemPrice\"\n                            placeholder=\"Enter Item Price\" v-model.trim=\"itemPrice\">\n                        <label for=\"floatingItemPrice\">Enter Item Price</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemPrice.$error\">{{\n                                v$.itemPrice.$errors[0].$message\n                        }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemsQty.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemQty\"\n                            placeholder=\"Enter Item Quantities\" v-model.trim=\"itemsQty\">\n                        <label for=\"floatingItemQty\">Enter Item Quantities</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemsQty.$error\">{{\n                                v$.itemsQty.$errors[0].$message\n                        }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.description.$error }\">\n                        <textarea class=\"form-control w300 h150\" placeholder=\"Enter Item Description\"\n                            id=\"floatingItemDesc\" v-model.trim=\"description\"></textarea>\n                        <label for=\"floatingItemDesc\">Enter Item Description</label>\n                        <span class=\"error-feedback\" v-if=\"v$.description.$error\">{{\n                                v$.description.$errors[0].$message\n                        }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating\" :class=\"{ 'form-group--error': v$.pickedCategory.$error }\">\n                        <select class=\"form-select w300\" id=\"floatingSelectCat\" v-model.trim=\"pickedCategory\">\n                            <!-- listOfCategories From mapstate  -->\n                            <option v-for=\"(cat, i) in listOfCategories\" :key=\"i\" :value=\"cat.id\">{{ cat.name }}\n                            </option>\n                        </select>\n                        <label for=\"floatingSelectCat\">Select Category Name</label>\n                        <span class=\"error-feedback\" v-if=\"v$.pickedCategory.$error\">{{\n                                v$.pickedCategory.$errors[0].$message\n                        }}</span>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length > 0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length > 0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center mb-3\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"updateItem()\" class=\"btn btn-success w300\">Update Now</button>\n                </div>\n            </div>\n        </form>\n\n        <!-- ------------------------------------- -->\n\n    </div>\n\n</template>\n\n<script>\n\n// To Use HTTP Request\nimport axios from \"axios\";\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\n// For validate data\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength, maxLength, between } from \"@vuelidate/validators\";\nimport Navbar from '@/components/Header/Navbar.vue';\n\nexport default {\n    name: 'UpdateItem',\n    components: {\n        Navbar\n    },\n    data() {\n        return {\n            v$: useValidate(),\n            userId: \"\",\n            userName: \"\",\n            locationId: this.$route.params.locationId,\n            itemId: this.$route.params.itemId,\n            locName: \"\",\n            locAddress: \"\",\n            itemName: \"\",\n            itemPrice: \"\",\n            itemsQty: 1,\n            description: \"\",\n            pickedCategory: \"\",\n            successMessage: \"\",\n            errorMessage: \"\",\n        }\n    },\n    validations() {\n        return {\n            itemName: { required, minLength: minLength(6) },\n            itemPrice: { required, between: between(0, 1000000) },\n            itemsQty: { required, between: between(1, 100000) },\n            description: { required, minLength: minLength(6), maxLength: maxLength(120) },\n            pickedCategory: { required },\n        }\n    },\n    computed: {\n        ...mapState([\n            \"isUserLoggedIn\",\n            \"LoggedInUserId\",\n            \"numOfCategories\",\n            \"listOfCategories\"\n        ]),\n    },\n    async mounted() {\n        let user = localStorage.getItem('user-info');\n        if (!user) {\n            // Using name in router file\n            this.redirectTo({ val: 'sign-up' });\n        } else {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.isLoggedInUser();\n            this.displayAllCategories({\n                userIdIs: this.userId,\n                locationIdIs: this.locationId\n            });\n            this.canUserAccessThisItem({\n                userIdIs: this.userId,\n                locationIdIs: this.locationId,\n                itemIdIs: this.itemId,\n                redirectToPage: \"home\",\n            });\n            this.canUserAccessThisLocation({\n                userIdIs: this.userId,\n                locationIdIs: this.locationId,\n                redirectToPage: \"home\",\n            });\n            this.getItemInfo(this.userId, this.locationId, this.itemId);\n            this.getLocationInfo(this.userId, this.locationId);\n        }\n    },\n    methods: {\n        ...mapMutations([\n            \"isLoggedInUser\",\n            \"displayAllCategories\",\n            \"canUserAccessThisItem\",\n            \"canUserAccessThisLocation\",\n        ]),\n        ...mapActions(['redirectTo']),\n        async getItemInfo(userId, locId, itemId) {\n            let result = await axios.get(`\n                http://localhost:3000/items?userId=${userId}&locationId=${locId}&id=${itemId}\n            `);\n            let itemDetails = result.data[0];\n            if (result.status == 200) {\n                this.itemName = itemDetails.name;\n                this.itemPrice = itemDetails.price;\n                this.itemsQty = itemDetails.qty;\n                this.description = itemDetails.description;\n                this.pickedCategory = itemDetails.catId;\n            }\n        },\n        async getLocationInfo(userId, locId) {\n            let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                if (locDetails.length > 0) {\n                    this.locName = locDetails[0].name;\n                    this.locAddress = locDetails[0].address;\n                }\n            }\n        },\n        async updateItem() {\n\n            // Activate Validation\n            this.v$.$validate();\n\n            if (!this.v$.$error) {\n\n                // http://localhost:3000/items/1\n                let result = await axios.put(`http://localhost:3000/items/${this.itemId}`, {\n                    name: this.itemName,\n                    // \"17.00\"\n                    price: parseFloat(this.itemPrice).toFixed(2),\n                    qty: parseInt(this.itemsQty),\n                    description: this.description,\n                    catId: this.pickedCategory,\n                    locId: parseInt(this.locationId),\n                    userId: this.userId,\n                });\n\n                if (result.status == 200) {\n\n                    this.errorMessage = '';\n                    this.successMessage = 'Item updated successfully';\n\n                    setTimeout(() => {\n                        this.$router.push({ name: \"menu\", params: { locationId: this.locationId } });\n                    }, 2000);\n\n                } else {\n                    this.successMessage = '';\n                    this.errorMessage = 'Something went wrong, Try Again';\n                }\n            }\n\n            else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in all required fields';\n            }\n\n        },\n    },\n\n}\n</script>\n\n<style scoped>\n.mb0 {\n    margin-bottom: 0;\n}\n\n.w300 {\n    min-width: 300px;\n}\n\n.h150 {\n    min-height: 150px;\n}\n\n.error-feedback,\n.form-group--error {\n    color: red;\n    font-size: 0.85em;\n}\n\n.form-group--error input,\n.form-group--error textarea,\n.form-group--error select {\n    border-color: red;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}